import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)
from database import Database
from channel_analyzer import ChannelAnalyzer
from post_generator import PostGenerator
from config import (
    TELEGRAM_BOT_TOKEN, WELCOME_MESSAGE, HELP_MESSAGE,
    MAIN_MENU_KEYBOARD, CHANNELS_MENU_KEYBOARD, GENERATE_MENU_KEYBOARD
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_CHANNEL_ID, WAITING_TOPIC, WAITING_FREE_TOPIC, WAITING_FEEDBACK, WAITING_NEWS_TOPIC, WAITING_NEWS_SUMMARY_TOPIC = range(6)

logger = logging.getLogger(__name__)

class PostAIBot:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")
        
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.db = Database()
        self.channel_analyzer = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ start_bot
        self.post_generator = PostGenerator()
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("channels", self.channels_command))
        self.application.add_handler(CommandHandler("generate", self.generate_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("debug", self.debug_command))
        self.application.add_handler(CommandHandler("testid", self.test_id_command))
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        add_channel_conv = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.add_channel_start, pattern="^add_channel$"),
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª$"), self.add_channel_start_from_menu)
            ],
            states={
                WAITING_CHANNEL_ID: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_channel_process),
                    MessageHandler(filters.FORWARDED, self.add_channel_process)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_operation)],
            per_message=False
        )
        self.application.add_handler(add_channel_conv)
        
        # ConversationHandler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ
        topic_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.topic_generation_start, pattern="^generate_topic_")],
            states={
                WAITING_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_by_topic)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_operation)]
        )
        self.application.add_handler(topic_conv)
        
        # ConversationHandler –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–π —Ç–µ–º—ã
        free_topic_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.free_topic_start, pattern="^generate_free_")],
            states={
                WAITING_FREE_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_free_topic)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_operation)]
        )
        self.application.add_handler(free_topic_conv)

        # ConversationHandler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        news_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.news_generation_start, pattern="^generate_news_")],
            states={
                WAITING_NEWS_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_news_post)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_operation)]
        )
        self.application.add_handler(news_conv)

        # ConversationHandler –¥–ª—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_summary_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìä –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π$"), self.news_summary_start)],
            states={
                WAITING_NEWS_SUMMARY_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_news_summary)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_operation)]
        )
        self.application.add_handler(news_summary_conv)
        
        # Callback handlers
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.FORWARDED & ~filters.COMMAND, self.handle_forwarded_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_menu))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
        if not self.channel_analyzer:
            self.channel_analyzer = ChannelAnalyzer(context.bot)
        
        keyboard = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
        
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(HELP_MESSAGE, parse_mode='HTML')
    
    async def channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels"""
        keyboard = ReplyKeyboardMarkup(CHANNELS_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def generate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate"""
        user_id = update.effective_user.id
        channels = self.db.get_user_channels(user_id)
        
        if not channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã'."
            )
            return
        
        keyboard = ReplyKeyboardMarkup(GENERATE_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        channels = self.db.get_user_channels(user_id)
        
        settings_text = f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name}
üìä –ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(channels)}
ü§ñ –ú–æ–¥–µ–ª—å –ò–ò: Gemini 2.0 Flash

üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:
"""
        
        for i, channel in enumerate(channels, 1):
            settings_text += f"{i}. {channel['channel_name']}\n"
        
        if not channels:
            settings_text += "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        
        await update.message.reply_text(settings_text)
    
    async def handle_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        user_id = update.effective_user.id
        
        if text == "üìä –ú–æ–∏ –∫–∞–Ω–∞–ª—ã":
            await self.show_channels_menu(update, context)
        
        elif text == "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
            await self.show_generate_menu(update, context)
        
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await self.settings_command(update, context)
        
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
            # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ConversationHandler
            pass
        
        elif text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤":
            await self.show_channels_list(update, context)
        
        elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑":
            await self.show_update_analysis_menu(update, context)
        
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            keyboard = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=keyboard
            )
        
        elif text in ["üéØ –ü–æ —Ç–µ–º–µ", "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç", "üìù –°–≤–æ–±–æ–¥–Ω–∞—è —Ç–µ–º–∞", "üì∞ –° –Ω–æ–≤–æ—Å—Ç—è–º–∏", "üìä –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"]:
            await self.handle_generation_type(update, context, text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ ID –∫–∞–Ω–∞–ª–∞ (fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞)
        elif text and (text.startswith('-100') or text.lstrip('-').isdigit()):
            await update.message.reply_text(
                f"üÜî –ü–æ–ª—É—á–µ–Ω ID –∫–∞–Ω–∞–ª–∞: {text}\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üìä –ú–æ–∏ –∫–∞–Ω–∞–ª—ã'\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'\n"
                "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID: {text}"
            )
    
    async def show_channels_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        keyboard = ReplyKeyboardMarkup(CHANNELS_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def show_generate_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        channels = self.db.get_user_channels(user_id)
        
        if not channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã'."
            )
            return
        
        keyboard = ReplyKeyboardMarkup(GENERATE_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    
    async def show_add_channel_instructions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞"""
        instructions = """
üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≤–∞—à Telegram –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:

üî∏ **–°–ø–æ—Å–æ–± 1 (–ü—Ä–æ—Å—Ç–æ–π)**: –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
üî∏ **–°–ø–æ—Å–æ–± 2**: –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞

üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞:
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @userinfobot
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @getidsbot

üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"""

        await update.message.reply_text(instructions)
        return WAITING_CHANNEL_ID

    async def show_channels_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        channels = self.db.get_user_channels(user_id)

        if not channels:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
            return

        channels_text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"

        for i, channel in enumerate(channels, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ
            style_info = self.db.get_style_analysis(channel['channel_id'])
            status = "‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" if style_info else "‚è≥ –¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"

            channels_text += f"{i}. **{channel['channel_name']}**\n"
            channels_text += f"   ID: `{channel['channel_id']}`\n"
            channels_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            if style_info:
                channels_text += f"   –ü–æ—Å—Ç–æ–≤: {style_info['posts_count']}\n"
            channels_text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {channel['added_at'][:10]}\n\n"

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–∞–º–∏
        keyboard = []
        for channel in channels:
            keyboard.append([
                InlineKeyboardButton(
                    f"üîÑ {channel['channel_name'][:20]}...",
                    callback_data=f"update_analysis_{channel['channel_id']}"
                )
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            channels_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_update_analysis_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = update.effective_user.id
        channels = self.db.get_user_channels(user_id)

        if not channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return

        keyboard = []
        for channel in channels:
            keyboard.append([
                InlineKeyboardButton(
                    f"üîÑ {channel['channel_name']}",
                    callback_data=f"update_analysis_{channel['channel_id']}"
                )
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=reply_markup
        )

    async def handle_generation_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE, generation_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–∞–Ω–∞–ª–∞)
        if generation_type == "üìä –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π":
            await update.message.reply_text(
                "üìä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'"
            )
            context.user_data['generation_type'] = 'news_summary'
            return WAITING_NEWS_SUMMARY_TOPIC

        channels = self.db.get_user_channels(user_id)

        if not channels:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
        keyboard = []
        for channel in channels:
            style_info = self.db.get_style_analysis(channel['channel_id'])
            if style_info:  # –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º
                if generation_type == "üéØ –ü–æ —Ç–µ–º–µ":
                    callback_data = f"generate_topic_{channel['channel_id']}"
                elif generation_type == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç":
                    callback_data = f"generate_random_{channel['channel_id']}"
                elif generation_type == "üìù –°–≤–æ–±–æ–¥–Ω–∞—è —Ç–µ–º–∞":
                    callback_data = f"generate_free_{channel['channel_id']}"
                elif generation_type == "üì∞ –° –Ω–æ–≤–æ—Å—Ç—è–º–∏":
                    callback_data = f"generate_news_{channel['channel_id']}"

                keyboard.append([
                    InlineKeyboardButton(
                        channel['channel_name'],
                        callback_data=callback_data
                    )
                ])

        if not keyboard:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã."
            )
            return

        reply_markup = InlineKeyboardMarkup(keyboard)

        type_text = {
            "üéØ –ü–æ —Ç–µ–º–µ": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ:",
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:",
            "üìù –°–≤–æ–±–æ–¥–Ω–∞—è —Ç–µ–º–∞": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–µ–º—É:",
            "üì∞ –° –Ω–æ–≤–æ—Å—Ç—è–º–∏": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏:"
        }

        await update.message.reply_text(
            type_text[generation_type],
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()

        data = query.data

        if data.startswith("update_analysis_"):
            channel_id = int(data.split("_")[2])
            await self.update_channel_analysis(query, context, channel_id)

        elif data.startswith("generate_random_"):
            channel_id = int(data.split("_")[2])
            await self.generate_random_post(query, context, channel_id)

        elif data.startswith("generate_topic_"):
            channel_id = int(data.split("_")[2])
            context.user_data['selected_channel'] = channel_id
            await query.edit_message_text(
                "üéØ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–æ–±–∑–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞'"
            )
            return WAITING_TOPIC

        elif data.startswith("generate_free_"):
            channel_id = int(data.split("_")[2])
            context.user_data['selected_channel'] = channel_id
            await query.edit_message_text(
                "üìù –û–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç:\n\n"
                "–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            )
            return WAITING_FREE_TOPIC

        elif data.startswith("generate_news_"):
            channel_id = int(data.split("_")[2])
            context.user_data['selected_channel'] = channel_id
            await query.edit_message_text(
                "üì∞ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–Ω–∞—É–∫–∞', '—Å–ø–æ—Ä—Ç'"
            )
            return WAITING_NEWS_TOPIC

    async def add_channel_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        query = update.callback_query
        await query.answer()

        instructions = """
üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot

–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞:
"""
        await query.edit_message_text(instructions)
        return WAITING_CHANNEL_ID

    async def add_channel_start_from_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–µ–Ω—é"""
        instructions = """
üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:

üî∏ **–°–ø–æ—Å–æ–± 1 (–ü—Ä–æ—Å—Ç–æ–π)**: –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
üî∏ **–°–ø–æ—Å–æ–± 2**: –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞

üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞:
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @userinfobot
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @getidsbot

üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"""

        await update.message.reply_text(instructions)
        return WAITING_CHANNEL_ID

    async def add_channel_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        user_id = update.effective_user.id

        logger.info(f"Processing channel addition from user {user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if update.message.forward_from_chat:
            channel_id = update.message.forward_from_chat.id
            channel_name = update.message.forward_from_chat.title
            channel_username = update.message.forward_from_chat.username

            await update.message.reply_text(
                f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                f"üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n"
                f"üÜî ID: {channel_id}\n"
                f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑..."
            )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ID
            channel_input = update.message.text.strip()
            logger.info(f"Received channel input: {channel_input}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞
            try:
                if channel_input.startswith('-100'):
                    channel_id = int(channel_input)
                    logger.info(f"Parsed channel ID: {channel_id}")
                elif channel_input.startswith('@'):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞
                    logger.info("Received username instead of ID")
                    await update.message.reply_text(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ username.\n"
                        "üí° –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞."
                    )
                    return WAITING_CHANNEL_ID
                else:
                    channel_id = int(channel_input)
                    logger.info(f"Parsed channel ID (without -100): {channel_id}")
            except ValueError as e:
                logger.error(f"ValueError parsing channel ID: {e}")
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "1Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
                    "2Ô∏è‚É£ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"
                )
                return WAITING_CHANNEL_ID

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        analyzing_msg = await update.message.reply_text(
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª...\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É\n"
            "üìù –°–æ–±–∏—Ä–∞—é –ø–æ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã..."
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
        if not self.channel_analyzer:
            self.channel_analyzer = ChannelAnalyzer(context.bot)

        result = await self.channel_analyzer.analyze_channel(channel_id, user_id)

        await analyzing_msg.delete()

        if result['success']:
            success_text = f"""
‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!

üìä **{result['channel_name']}**
üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {result['posts_analyzed']}
üéØ –°—Ç–∏–ª—å –∏–∑—É—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
üß† –ò–ò –ø–æ–Ω—è–ª –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç" –¥–ª—è –Ω–∞—á–∞–ª–∞!
"""
            keyboard = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
            await update.message.reply_text(
                success_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            error_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:
{result['error']}

üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
1Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
2Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞
4Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
"""
            await update.message.reply_text(error_text)
            return WAITING_CHANNEL_ID

        return ConversationHandler.END

    async def topic_generation_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ callback, –ª–æ–≥–∏–∫–∞ —É–∂–µ –≤ handle_callback
        pass

    async def generate_by_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ"""
        topic = update.message.text.strip()
        channel_id = context.user_data.get('selected_channel')

        if not channel_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generating_msg = await update.message.reply_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        result = await self.post_generator.generate_post_by_topic(channel_id, topic)

        await generating_msg.delete()

        if result['success']:
            post_text = f"""
‚ú® **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**

{result['post']}

---
üéØ –¢–µ–º–∞: {result['topic']}
"""
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"generate_topic_{channel_id}")],
                [InlineKeyboardButton("üìù –£–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"improve_post_{channel_id}")],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                post_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{result['error']}"
            )

        return ConversationHandler.END

    async def free_topic_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ç–µ–º—ã"""
        # –õ–æ–≥–∏–∫–∞ —É–∂–µ –≤ handle_callback
        pass

    async def generate_free_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–µ–º—É"""
        user_request = update.message.text.strip()
        channel_id = context.user_data.get('selected_channel')

        if not channel_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END

        generating_msg = await update.message.reply_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        result = self.post_generator.generate_free_topic_post(channel_id, user_request)

        await generating_msg.delete()

        if result['success']:
            post_text = f"""
‚ú® **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**

{result['post']}

---
üìù –ó–∞–ø—Ä–æ—Å: {result['topic']}
"""
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"generate_free_{channel_id}")],
                [InlineKeyboardButton("üìù –£–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"improve_post_{channel_id}")],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                post_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{result['error']}"
            )

        return ConversationHandler.END

    async def generate_random_post(self, query, context: ContextTypes.DEFAULT_TYPE, channel_id: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        await query.edit_message_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        result = await self.post_generator.generate_random_post(channel_id)

        if result['success']:
            post_text = f"""
‚ú® **–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç:**

{result['post']}

---
üé≤ –¢–µ–º–∞: {result['topic']}
"""
            keyboard = [
                [InlineKeyboardButton("üîÑ –ï—â–µ —Å–ª—É—á–∞–π–Ω—ã–π", callback_data=f"generate_random_{channel_id}")],
                [InlineKeyboardButton("üìù –£–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"improve_post_{channel_id}")],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                post_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{result['error']}"
            )

    async def update_channel_analysis(self, query, context: ContextTypes.DEFAULT_TYPE, channel_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
        await query.edit_message_text(
            "üîÑ –û–±–Ω–æ–≤–ª—è—é –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )

        if not self.channel_analyzer:
            self.channel_analyzer = ChannelAnalyzer(context.bot)

        result = await self.channel_analyzer.update_channel_analysis(channel_id)

        if result['success']:
            await query.edit_message_text(
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {result['posts_analyzed']}\n"
                f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result['updated_at'].strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:\n{result['error']}"
            )

    async def cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        keyboard = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=keyboard
        )
        return ConversationHandler.END

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting PostAI Bot...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

        logger.info("Bot is running...")

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try:
            await self.application.updater.idle()
        except AttributeError:
            # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π python-telegram-bot
            import asyncio
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info("Received keyboard interrupt")

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping PostAI Bot...")
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()

    async def news_generation_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        # –õ–æ–≥–∏–∫–∞ —É–∂–µ –≤ handle_callback
        pass

    async def generate_news_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        topic = update.message.text.strip()
        channel_id = context.user_data.get('selected_channel')

        if not channel_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END

        generating_msg = await update.message.reply_text(
            "üì∞ –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏."
        )

        result = await self.post_generator.generate_news_based_post(channel_id, topic)

        await generating_msg.delete()

        if result['success']:
            post_text = f"""
üì∞ **–ü–æ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏:**

{result['post']}

---
üéØ –¢–µ–º–∞: {result['topic']}
üìä –¢–∏–ø: –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π
"""
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data=f"generate_news_{channel_id}")],
                [InlineKeyboardButton("üìù –£–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"improve_post_{channel_id}")],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                post_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏:\n{result['error']}"
            )

        return ConversationHandler.END

    async def news_summary_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'"
        )
        return WAITING_NEWS_SUMMARY_TOPIC

    async def generate_news_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        topic = update.message.text.strip()

        generating_msg = await update.message.reply_text(
            "üìä –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        result = await self.post_generator.get_news_summary(topic)

        await generating_msg.delete()

        if result['success']:
            summary_text = f"""
üìä **–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:**

{result['summary']}

---
üéØ –¢–µ–º–∞: {result['topic']}
"""
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É", callback_data=f"news_summary_{topic}")],
                [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_post")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                summary_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n{result['error']}"
            )

        return ConversationHandler.END

    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
        user_id = update.effective_user.id

        debug_info = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**
- ID: {user_id}
- Username: @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ò–º—è: {update.effective_user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üìä **–ö–∞–Ω–∞–ª—ã:**
"""

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels = self.db.get_user_channels(user_id)
        if channels:
            for i, channel in enumerate(channels, 1):
                style_info = self.db.get_style_analysis(channel['channel_id'])
                status = "‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" if style_info else "‚è≥ –¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
                debug_info += f"{i}. {channel['channel_name']}\n"
                debug_info += f"   ID: {channel['channel_id']}\n"
                debug_info += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                if style_info:
                    debug_info += f"   –ü–æ—Å—Ç–æ–≤: {style_info['posts_count']}\n"
                debug_info += "\n"
        else:
            debug_info += "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"

        debug_info += f"""
ü§ñ **–ë–æ—Ç:**
- –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
- Gemini API: –ù–∞—Å—Ç—Ä–æ–µ–Ω

üí° **–°–æ–≤–µ—Ç—ã:**
- –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels
- –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
"""

        await update.message.reply_text(debug_info, parse_mode='Markdown')

    async def test_id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID"""
        await update.message.reply_text(
            "üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∫–∞–Ω–∞–ª–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890\n\n"
            "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–≤–æ–¥."
        )

    async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message.forward_from_chat:
            chat = update.message.forward_from_chat
            if chat.type in ['channel', 'supergroup']:
                info_text = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:**

üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
üÜî ID: `{chat.id}`
üë• –¢–∏–ø: {chat.type}
üîó Username: @{chat.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª:
1. –ù–∞–∂–º–∏—Ç–µ "üìä –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID: `{chat.id}`
"""
                await update.message.reply_text(info_text, parse_mode='Markdown')
