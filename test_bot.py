#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ PostAI Bot
"""

import os
import sys
import tempfile
import unittest
from unittest.mock import Mock, patch, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class TestDatabase(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        
        # –ü–∞—Ç—á–∏–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with patch('config.DATABASE_PATH', self.temp_db.name):
            from database import Database
            self.db = Database()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        os.unlink(self.temp_db.name)
    
    def test_add_user(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.db.add_user(
            user_id=12345,
            username="testuser",
            first_name="Test",
            last_name="User"
        )
        self.assertTrue(result)
    
    def test_add_channel(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(12345, "testuser")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        result = self.db.add_channel(
            channel_id=-1001234567890,
            channel_name="Test Channel",
            user_id=12345,
            channel_username="testchannel"
        )
        self.assertTrue(result)
    
    def test_get_user_channels(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª
        self.db.add_user(12345, "testuser")
        self.db.add_channel(-1001234567890, "Test Channel", 12345)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
        channels = self.db.get_user_channels(12345)
        self.assertEqual(len(channels), 1)
        self.assertEqual(channels[0]['channel_name'], "Test Channel")

class TestGeminiClient(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è Gemini –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫-–æ–±—ä–µ–∫—Ç–æ–≤"""
        self.mock_api_key = "test_api_key"
    
    @patch('config.GEMINI_API_KEY', 'test_api_key')
    @patch('google.generativeai.configure')
    @patch('google.generativeai.GenerativeModel')
    def test_gemini_client_init(self, mock_model, mock_configure):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini –∫–ª–∏–µ–Ω—Ç–∞"""
        from gemini_client import GeminiClient
        
        client = GeminiClient()
        mock_configure.assert_called_once_with(api_key='test_api_key')
        mock_model.assert_called_once()
    
    @patch('config.GEMINI_API_KEY', 'test_api_key')
    @patch('google.generativeai.configure')
    @patch('google.generativeai.GenerativeModel')
    def test_analyze_channel_style(self, mock_model_class, mock_configure):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –∫–∞–Ω–∞–ª–∞"""
        from gemini_client import GeminiClient
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        mock_model = Mock()
        mock_response = Mock()
        mock_response.text = "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–∞–Ω–∞–ª–∞"
        mock_model.generate_content.return_value = mock_response
        mock_model_class.return_value = mock_model
        
        client = GeminiClient()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        posts = [
            {'content': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 1', 'date': '2024-01-01'},
            {'content': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 2', 'date': '2024-01-02'}
        ]
        
        result = client.analyze_channel_style(posts)
        self.assertEqual(result, "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–∞–Ω–∞–ª–∞")
        mock_model.generate_content.assert_called_once()

class TestPostGenerator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        os.unlink(self.temp_db.name)
    
    @patch('config.DATABASE_PATH')
    @patch('config.GEMINI_API_KEY', 'test_api_key')
    @patch('google.generativeai.configure')
    @patch('google.generativeai.GenerativeModel')
    def test_generate_post_by_topic(self, mock_model_class, mock_configure, mock_db_path):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ"""
        mock_db_path.return_value = self.temp_db.name
        
        from post_generator import PostGenerator
        from database import Database
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        db.save_style_analysis(
            channel_id=-1001234567890,
            style_analysis="–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è",
            posts_count=10
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ Gemini
        mock_model = Mock()
        mock_response = Mock()
        mock_response.text = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"
        mock_model.generate_content.return_value = mock_response
        mock_model_class.return_value = mock_model
        
        generator = PostGenerator()
        result = generator.generate_post_by_topic(-1001234567890, "—Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞")
        
        self.assertTrue(result['success'])
        self.assertEqual(result['post'], "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
        self.assertEqual(result['topic'], "—Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞")

class TestConfig(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_config_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import config
            self.assertTrue(hasattr(config, 'WELCOME_MESSAGE'))
            self.assertTrue(hasattr(config, 'MAIN_MENU_KEYBOARD'))
            self.assertTrue(hasattr(config, 'MAX_POSTS_TO_ANALYZE'))
        except ImportError:
            self.fail("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å config")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PostAI Bot...")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestDatabase))
    suite.addTests(loader.loadTestsFromTestCase(TestGeminiClient))
    suite.addTests(loader.loadTestsFromTestCase(TestPostGenerator))
    suite.addTests(loader.loadTestsFromTestCase(TestConfig))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("=" * 40)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"–ù–µ—É–¥–∞—á: {len(result.failures)}")
        return False

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)
