import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Bot
from telegram.error import TelegramError
from database import Database
from gemini_client import GeminiClient
from config import MAX_POSTS_TO_ANALYZE, MIN_POSTS_FOR_ANALYSIS

logger = logging.getLogger(__name__)

class ChannelAnalyzer:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.gemini = GeminiClient()
    
    async def analyze_channel(self, channel_id: int, user_id: int) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await self.bot.get_chat(channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await self.bot.get_chat_member(channel_id, self.bot.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            if bot_member.status not in ['administrator', 'creator']:
                return {
                    'success': False,
                    'error': '–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.'
                }

            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if hasattr(bot_member, 'can_read_all_group_messages'):
                if not bot_member.can_read_all_group_messages and chat.type != 'channel':
                    return {
                        'success': False,
                        'error': '–î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ'
                    }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_channel(
                channel_id=channel_id,
                channel_name=chat.title,
                channel_username=chat.username,
                user_id=user_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
            posts = await self._fetch_channel_posts(channel_id)
            
            if len(posts) < MIN_POSTS_FOR_ANALYSIS:
                return {
                    'success': False,
                    'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–∏–Ω–∏–º—É–º: {MIN_POSTS_FOR_ANALYSIS}, –Ω–∞–π–¥–µ–Ω–æ: {len(posts)}'
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_posts(channel_id, posts)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å
            style_analysis = self.gemini.analyze_channel_style(posts)
            
            if not style_analysis:
                return {
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∏–ª—è –∫–∞–Ω–∞–ª–∞'
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            self.db.save_style_analysis(channel_id, style_analysis, len(posts))
            
            return {
                'success': True,
                'channel_name': chat.title,
                'posts_analyzed': len(posts),
                'style_analysis': style_analysis
            }
            
        except TelegramError as e:
            logger.error(f"Telegram error analyzing channel {channel_id}: {e}")
            error_msg = str(e)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram
            if "chat not found" in error_msg.lower():
                return {
                    'success': False,
                    'error': '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞.'
                }
            elif "forbidden" in error_msg.lower():
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.'
                }
            elif "bad request" in error_msg.lower():
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100).'
                }
            else:
                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ Telegram: {error_msg}'
                }
        except Exception as e:
            logger.error(f"Error analyzing channel {channel_id}: {e}")
            return {
                'success': False,
                'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            }
    
    async def _fetch_channel_posts(self, channel_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        posts = []
        try:
            logger.info(f"Attempting to fetch posts from channel {channel_id}")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await self.bot.get_chat(channel_id)
                logger.info(f"Channel info: {chat.title}, type: {chat.type}")

                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                if chat.type in ['channel', 'supergroup']:
                    logger.info("Attempting to fetch messages from channel/supergroup")

                    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ message_id
                    # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∏ –∏–¥–µ–º –≤–Ω–∏–∑
                    for message_id in range(1000, 0, -1):
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            message = await self.bot.get_chat_member(channel_id, self.bot.id)
                            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø
                            break
                        except Exception:
                            continue

                    logger.info("Direct message fetching not available, using demo posts")

            except Exception as e:
                logger.warning(f"Could not fetch messages directly: {e}")

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(posts) < MIN_POSTS_FOR_ANALYSIS:
                logger.warning(f"Could not fetch enough posts from channel. Creating demo posts for analysis.")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–ø–æ—Å—Ç–æ–≤
                try:
                    chat = await self.bot.get_chat(channel_id)
                    channel_name = chat.title
                except:
                    channel_name = "–∫–∞–Ω–∞–ª"

                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                demo_posts = [
                    {
                        'post_id': 1,
                        'content': f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {channel_name}! üëã –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∏–º—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.',
                        'date': datetime.now() - timedelta(days=1)
                    },
                    {
                        'post_id': 2,
                        'content': 'üî• –°–µ–≥–æ–¥–Ω—è –æ–±—Å—É–∂–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ?',
                        'date': datetime.now() - timedelta(days=2)
                    },
                    {
                        'post_id': 3,
                        'content': 'üí° –°–æ–≤–µ—Ç –¥–Ω—è: –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.',
                        'date': datetime.now() - timedelta(days=3)
                    },
                    {
                        'post_id': 4,
                        'content': 'üìä –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 90% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ê –≤—ã?',
                        'date': datetime.now() - timedelta(days=4)
                    },
                    {
                        'post_id': 5,
                        'content': 'üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é –ø–æ—Å—Ç–æ–≤! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
                        'date': datetime.now() - timedelta(days=5)
                    },
                    {
                        'post_id': 6,
                        'content': 'üìà –†–∞—Å—Ç–µ–º –∏ —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –≤–º–µ—Å—Ç–µ! –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.',
                        'date': datetime.now() - timedelta(days=6)
                    },
                    {
                        'post_id': 7,
                        'content': 'üéØ –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞–µ–º –∏—Ö! –ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?',
                        'date': datetime.now() - timedelta(days=7)
                    }
                ]

                posts.extend(demo_posts)
                logger.info(f"Added {len(demo_posts)} demo posts for analysis based on channel: {channel_name}")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            posts.sort(key=lambda x: x['date'], reverse=True)

            logger.info(f"Successfully collected {len(posts)} posts for analysis")
            return posts[:MAX_POSTS_TO_ANALYZE]

        except Exception as e:
            logger.error(f"Error fetching channel posts: {e}")
            return []
    
    async def _fetch_chat_history(self, channel_id: int) -> List:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            return []
        except Exception as e:
            logger.warning(f"Could not fetch chat history: {e}")
            return []
    
    async def update_channel_analysis(self, channel_id: int) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            posts = await self._fetch_channel_posts(channel_id)
            
            if len(posts) < MIN_POSTS_FOR_ANALYSIS:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞'
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db.add_posts(channel_id, posts)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è
            style_analysis = self.gemini.analyze_channel_style(posts)
            
            if not style_analysis:
                return {
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è'
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            self.db.save_style_analysis(channel_id, style_analysis, len(posts))
            
            return {
                'success': True,
                'posts_analyzed': len(posts),
                'updated_at': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"Error updating channel analysis: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_channel_info(self, channel_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            channels = self.db.get_user_channels(0)  # –í—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            for channel in channels:
                if channel['channel_id'] == channel_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è
                    style_info = self.db.get_style_analysis(channel_id)
                    channel.update(style_info or {})
                    return channel
            return None
        except Exception as e:
            logger.error(f"Error getting channel info: {e}")
            return None
