#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    keyboard = [
        ["üìä –¢–µ—Å—Ç", "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = f"""
ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å
/debug - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
/test - –¢–µ—Å—Ç

–í–∞—à ID: {user.id}
"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    user = update.effective_user
    
    debug_info = f"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- ID: {user.id}
- Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ò–º—è: {user.first_name}
- –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
- –¢–∏–ø —á–∞—Ç–∞: {update.effective_chat.type}
- ID —á–∞—Ç–∞: {update.effective_chat.id}

ü§ñ –ë–æ—Ç:
- –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
- –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}

üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
"""
    
    await update.message.reply_text(debug_info)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await update.message.reply_text(
        "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.forward_from_chat:
        chat = update.message.forward_from_chat
        response = f"""
üì§ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
- ID: {chat.id}
- –¢–∏–ø: {chat.type}
- Username: @{chat.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

‚úÖ –ë–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
"""
        await update.message.reply_text(response)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ ID –∫–∞–Ω–∞–ª–∞
    if message_text and (message_text.startswith('-100') or message_text.lstrip('-').isdigit()):
        try:
            channel_id = int(message_text)
            response = f"""
üÜî –ü–æ–ª—É—á–µ–Ω ID –∫–∞–Ω–∞–ª–∞: {channel_id}

‚úÖ –ë–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –∫–∞–Ω–∞–ª–æ–≤!

–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É...
"""
            await update.message.reply_text(response)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                chat = await context.bot.get_chat(channel_id)
                success_response = f"""
‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ!

üìä –ö–∞–Ω–∞–ª: {chat.title}
üë• –¢–∏–ø: {chat.type}
üîó Username: @{chat.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéâ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!
"""
                await update.message.reply_text(success_response)
            except Exception as e:
                error_response = f"""
‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:
{str(e)}

üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
2. –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
"""
                await update.message.reply_text(error_response)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if message_text == "üìä –¢–µ—Å—Ç":
        await test_command(update, context)
    elif message_text == "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await debug_command(update, context)
    elif message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
            "–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"
        )
    elif message_text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "üÜò –ü–æ–º–æ—â—å:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "4. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"
        )
    else:
        # –≠—Ö–æ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {TOKEN[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –≤ Telegram")
    
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
